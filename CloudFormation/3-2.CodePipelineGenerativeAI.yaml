# Create a stack with the name [generativeai-myblog]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: My Blog Configuration
        Parameters:
          - S3NameForCodePipeline
          - S3NameForMyBlog
          - CodeStarConnectionName
          - GitHubRepositoryName
          - CodePipelineName
          - MainBranchName
          - CodePipelineIAMRoleName
          - CodePipelineIAMPolicyName
          - EventBridgeRuleName
          - EventBridgeIAMRoleName
          - EventBridgeIAMPolicyName
          - CodeBuildCloudWatchLogsName
          - CodeBuildIAMRoleName
          - CodeBuildIAMPolicyName
          - CodeBuildProjectName
          - SourceS3Prefix
      - Label:
          default: For Deleting S3 Bucket Configuration
        Parameters:
          - LambdaName
          - CloudWatchLogsName
          - IAMRoleName
          - IAMPolicyName

Parameters:
  LambdaName:
    Type: String
    Default: "ForDeletingS3Object3"

  CloudWatchLogsName:
    Type: String
    Default: "ForDeletingS3Object3"

  IAMRoleName:
    Type: String
    Default: "ForDeletingS3Object3"

  IAMPolicyName:
    Type: String
    Default: "ForDeletingS3Object3"

  S3NameForCodePipeline:
    Type: String
    Default: "metalmental-myblog-generativeai-codepipeline-s3"

  S3NameForMyBlog:
    Type: String
    Default: "metalmental-myblog"

  S3PrefixNameGenAI:
    Type: String
    Default: "S3_Content/generative_ai/dummy.zip"

  CodePipelineName:
    Type: String
    Default: "metalmental-myblog-GenAI"

  CodePipelineIAMRoleName:
    Type: String
    Default: "metalmental-myblog-GenAI-CodePipelineIAMRole"

  CodePipelineIAMPolicyName:
    Type: String
    Default: "metalmental-myblog-GenAI-CodePipelineIAMPolicy"

  EventBridgeRuleName:
    Type: String
    Default: "metalmental-myblog-GenAI"

  EventBridgeIAMRoleName:
    Type: String
    Default: "metalmental-myblog-GenAI-EventBridgeIAMRole"

  EventBridgeIAMPolicyName:
    Type: String
    Default: "metalmental-myblog-GenAI-EventBridgeIAMPolicy"

  CodeBuildCloudWatchLogsName:
    Type: String
    Default: "metalmental-myblog-GenAI-CodeDeployBuild"

  CodeBuildIAMRoleName:
    Type: String
    Default: "metalmental-myblog-GenAI-CodeDeployBuildIAMRole"

  CodeBuildIAMPolicyName:
    Type: String
    Default: "metalmental-myblog-GenAI-CodeDeployBuildIAMPolicy"

  CodeBuildProjectName:
    Type: String
    Default: "metalmental-myblog-GenAI"

  SourceS3Prefix:
    Type: String
    Default: "metalmental-myblog/S3_Content/generative_ai/"

Resources:
  S3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3NameForCodePipeline
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: FALSE
      IntelligentTieringConfigurations:
        - Id: "IntelligentTieringConfigurations"
          Status: "Enabled"
          Tierings:
            - Days: 90
              AccessTier: "ARCHIVE_ACCESS"
            - Days: 180
              AccessTier: "DEEP_ARCHIVE_ACCESS"

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref CodePipelineName
      ExecutionMode: "QUEUED"
      PipelineType: "V2"
      ArtifactStore:
        Type: "S3"
        Location: !Ref S3
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: SourceArtifacts
              Configuration:
                S3Bucket: !Ref S3NameForMyBlog
                S3ObjectKey: !Ref S3PrefixNameGenAI
                PollForSourceChanges: false
              RunOrder: 1
        - Name: "Build"
          Actions:
            - Name: "Build"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: "SourceArtifacts"

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      ServiceRole: !Ref CodeBuildIAMRole
      Source:
        Type: "S3"
        Location: !Ref SourceS3Prefix
      Artifacts:
        Type: "NO_ARTIFACTS"
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
        PrivilegedMode: True
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref CodeBuildClousWatchLogs
          Status: "ENABLED"

  CodeBuildClousWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref CodeBuildCloudWatchLogsName
      LogGroupClass: INFREQUENT_ACCESS
      RetentionInDays: 1

  CodePipelineIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CodePipelineIAMRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Policies:
        - PolicyName: !Ref CodePipelineIAMPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:*
                  - "codedeploy:*"
                  - "codebuild:*"
                  - "s3:*"
                  - "cloudwatch:*"
                  - "sns:*"
                  - "lambda:*"
                  - "iam:PassRole"
                Resource: "*"

  LambdaForDeletingS3Object:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Handler: index.lambda_handler
      Role: !GetAtt IAMRoleForLambda.Arn
      Runtime: python3.12
      Timeout: 300
      LoggingConfig:
        LogGroup: !Ref CloudWatchLogs
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def lambda_handler(event, context):
              s3 = boto3.resource('s3')
              try:
                  if event['RequestType'] == 'Delete':
                      bucket = s3.Bucket(event['ResourceProperties']['BucketName'])
                      bucket.objects.all().delete()
                      bucket.object_versions.all().delete()
                      s3.Bucket(event['ResourceProperties']['BucketName']).delete()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print("Error: ", e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  InvokeLambda:
    Type: Custom::EmptyS3Bucket
    Properties:
      ServiceToken: !GetAtt LambdaForDeletingS3Object.Arn
      BucketName: !Ref S3

  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref IAMRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Ref IAMPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - logs:*
                Resource:
                  - !Sub ${S3.Arn}
                  - !Sub ${S3.Arn}/*

  CloudWatchLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref CloudWatchLogsName
      LogGroupClass: INFREQUENT_ACCESS
      RetentionInDays: 1

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref EventBridgeRuleName
      EventBusName: "default"
      State: "ENABLED"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "s3.amazonaws.com"
          eventName:
            - CopyObject
            - PutObject
            - PostObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              - !Ref S3NameForMyBlog
            key:
              - !Ref S3PrefixNameGenAI
      Targets:
        - Arn: !Join
            - ""
            - - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:"
              - !Ref CodePipeline
          Id: CodePipeline
          RoleArn: !GetAtt EventBridgeIAMRole.Arn

  EventBridgeIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref EventBridgeIAMRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - events.amazonaws.com
      Policies:
        - PolicyName: !Ref EventBridgeIAMPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:StartPipelineExecution"
                Resource: !Join
                  - ""
                  - - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:"
                    - !Ref CodePipeline

  CodeBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CodeBuildIAMRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: !Ref CodeBuildIAMPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:*"
                  - "logs:*"
                  - "s3:*"
                  - "cloudformation:*"
                  - "iam:*"
                Resource: "*"
